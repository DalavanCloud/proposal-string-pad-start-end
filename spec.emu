<!doctype html>
<meta charset="utf8">
<title>String.prototype.padLeft / padRight</title>
<link rel="stylesheet" href="./elements.css">
<link rel="stylesheet" href="https://bterlson.github.io/ecmarkup/elements.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<emu-clause id="String.prototype.padLeft">
  <h1>String.prototype.padLeft( maxLength [ , fillString ] )</h1>
  <p>The first argument _maxLength_ will be clamped such that it can be no smaller than the length of the *this* value.</p>
  <p>The optional second argument _fillString_ defaults to *" "* (a string consisting of a single space).</p>

  <p>When the _padLeft_ method is called, the following steps are taken:</p>
  <emu-alg>
    1. Let _O_ be RequireObjectCoercible(*this* value).
    1. Let _S_ be ToString(_O_).
    1. ReturnIfAbrupt(_S_).
    1. Let _stringLength_ be ToLength(Get(_S_, *"length"*)).
    1. ReturnIfAbrupt(_stringLength_).
    1. If _fillString_ is *undefined*, let _fillStr_ be the empty String.
    1. Else, let _fillStr_ be ToString(_fillString_).
    1. If _fillStr_ is the empty String, let _fillStr_ be *" "* (a string consisting of a single space).
    1. Let _intMaxLength_ be max(_stringLength_, ToLength(_maxLength_))
    1. If _intMaxLength_ is not greater than _stringLength_, return _S_.
    1. Let _fillLen_ be _intMaxLength_ - _stringLength_.
    1. Let _stringFiller_ be the empty String.
    1. Repeat, while the length of _stringFiller_ is less than _fillLen_:
      1. Let _stringFiller_ be a new String value computed by the concatenation of _stringFiller_ and _fillStr_.
    1. Return a new String value computed by the concatenation of the last _fillLen_ elements of _stringFiller_, and _S_.
  </emu-alg>
  <emu-note>The _length_ property of the _padLeft_ method is *1*.</emu-note>
</emu-clause>

<emu-clause id="String.prototype.padRight">
  <h1>String.prototype.padRight( maxLength [ , fillString ] )</h1>
  <p>The first argument _maxLength_ will be clamped such that it can be no smaller than the length of the *this* value.</p>
  <p>The optional second argument _fillString_ defaults to *" "* (a string consisting of a single space).</p>

  <p>When the _padRight_ method is called, the following steps are taken:</p>
  <emu-alg>
    1. Let _O_ be RequireObjectCoercible(*this* value).
    1. Let _S_ be ToString(_O_).
    1. ReturnIfAbrupt(_S_).
    1. Let _stringLength_ be ToLength(Get(_S_, *"length"*)).
    1. ReturnIfAbrupt(_stringLength_).
    1. If _fillString_ is *undefined*, let _fillStr_ be the empty String.
    1. Else, let _fillStr_ be ToString(_fillString_).
    1. If _fillStr_ is the empty String, let _fillStr_ be *" "* (a string consisting of a single space).
    1. Let _intMaxLength_ be max(_stringLength_, ToLength(_maxLength_))
    1. If _intMaxLength_ is not greater than _stringLength_, return _S_.
    1. Let _fillLen_ be _intMaxLength_ - _stringLength_.
    1. Let _stringFiller_ be the empty String.
    1. Repeat, while the length of _stringFiller_ is less than _fillLen_:
      1. Let _stringFiller_ be a new String value computed by the concatenation of _stringFiller_ and _fillStr_.
    1. Return a new String value computed by the concatenation of _S_, and the first _fillLen_ elements of _stringFiller_.
  </emu-alg>
  <emu-note>The _length_ property of the _padRight_ method is *1*.</emu-note>
</emu-clause>
